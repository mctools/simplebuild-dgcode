inline void FileWriter::writeDataDBSection(const char* data, unsigned n)//data nbytes
{
  if (!n)
    return;
  unsigned l(m_section_database.size());
  m_section_database.resize_without_init(l+n);
  std::memcpy(&(m_section_database[l]),data,n);
}

inline void FileWriter::writeDataBriefSection(const char* data, unsigned n)
{
  if (!n)
    return;
  unsigned l(m_section_briefdata.size());
  m_section_briefdata.resize_without_init(l+n);
  std::memcpy(&(m_section_briefdata[l]),data,n);
}

inline void FileWriter::writeDataFullSection(const char* data, unsigned n)
{
  if (!n)
    return;
  unsigned l(m_section_fulldata.size());
  m_section_fulldata.resize_without_init(l+n);
  std::memcpy(&(m_section_fulldata[l]),data,n);
}

inline void FileWriter::registerPreFlushCallback(IFWPreFlushCB&cb)
{
  m_preFlushCBs.push_back(&cb);
}

//Avoid one case of bad usage:
template<>
inline void FileWriter::writeDataDBSection(const std::string&) { assert(false&&"Only write POD's with these template methods"); }
template<>
inline void FileWriter::writeDataBriefSection(const std::string&) { assert(false&&"Only write POD's with these template methods"); }
template<>
inline void FileWriter::writeDataFullSection(const std::string&) { assert(false&&"Only write POD's with these template methods"); }
